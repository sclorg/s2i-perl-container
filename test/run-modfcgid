#!/bin/bash
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to exercise the S2I scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME-sclorg/perl-532-c9s}

# TODO: Make command compatible for Mac users
test_dir="$(readlink -f $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$(readlink -f ${test_dir}/..)

TEST_LIST="\
test_sample_test_app
test_binpath
test_psgi
test_psgi_hot_deploy_without_reload
test_psgi_hot_deploy_with_reload
test_psgi_variables
test_warningonstderr
test_fcgi
test_npm
test_from_dockerfile
"
source "${test_dir}/test-lib.sh"

ct_init

# TODO: This should be part of the image metadata
test_port=8080

info() {
  echo -e "\n\e[1m[INFO] $@...\e[0m\n"
}

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

container_ip() {
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat $cid_file)
}

run_s2i_build() {
  ct_s2i_build_as_df file://${test_dir}/${test_name} ${IMAGE_NAME} ${IMAGE_NAME}-testapp $(ct_build_s2i_npm_variables) "$@"
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # TODO: S2I build require the application is a valid 'GIT' repository, we
  # should remove this restriction in the future when a file:// is used.
  info "Build the test application image"
  pushd ${test_dir}/${test_name} >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null
}

run_test_application() {
  docker run --user=100001 --rm --cidfile=${cid_file} ${IMAGE_NAME}-testapp
}

cleanup_test_app() {
  info "Cleaning up the test application"
  if [ -f $cid_file ]; then
    if container_exists; then
      docker stop $(cat $cid_file)
    fi
    rm $cid_file
  fi
}

cleanup() {
  info "Cleaning up the test application image"
  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi -f ${IMAGE_NAME}-testapp
  fi
  rm -rf ${test_dir}/${test_name}/.git
}

test_s2i_usage() {
  info "Testing 's2i usage'"
  ct_s2i_usage ${IMAGE_NAME} ${s2i_args} &>/dev/null
}

test_docker_run_usage() {
  info "Testing 'docker run' usage"
  docker run ${IMAGE_NAME} &>/dev/null
}

test_scl_usage() {
  local run_cmd="$1"
  local expected="$2"

  info "Testing the image SCL enable"
  out=$(docker run --rm ${IMAGE_NAME} /bin/bash -c "${run_cmd}")
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/bash -c "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/sh -ic "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/sh -ic "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}

# Perform GET request to the application container.
# First argument is request URI path.
# Second argument is expected HTTP response code.
# Third argument is PCRE regular expression that must match the response body.
test_response() {
  local uri_path="$1"
  local expected_code="$2"
  local body_regexp="$3"

  local url="http://$(container_ip):${test_port}${uri_path}"
  info "Testing the HTTP response for <${url}>"
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    response=$(curl -s -w '%{http_code}' "${url}")
    status=$?
    if [ $status -eq 0 ]; then
      response_code=$(printf '%s' "$response" | tail -c 3)
      response_body=$(printf '%s' "$response" | head -c -3)
      if [ "$response_code" -eq "$expected_code" ]; then
        result=0
      fi
      printf '%s' "$response_body" | grep -qP -e "$body_regexp" || result=1;
      break
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}

# Match PCRE regular expression against container standard output.
# First argument is the PCRE regular expression.
# It expects standard output in ${tmp_dir}/out file.
test_stdout() {
  local regexp="$1"
  local output="${tmp_dir}/out"
  info "Testing the container standard output for /${regexp}/"
  grep -qP -e "$regexp" "$output";
}

# Match PCRE regular expression against container standard error output.
# First argument is the PCRE regular expression.
# It expects error output in ${tmp_dir}/err file.
test_stderr() {
  local regexp="$1"
  local output="${tmp_dir}/err"
  info "Testing the container error output for /${regexp}/"
  grep -qP -e "$regexp" "$output";
}

test_connection() {
    test_response '/' 200 ''
}

test_application() {
  # Verify that the HTTP connection can be established to test application container
  local version

  version="5.26"
  run_test_application &

  # Wait for the container to write it's CID file
  ct_wait_for_cid $cid_file

  if [ x"$VERSION" == "x5.30-mod_fcgid" ]; then
    version="5.30"
  elif [ x"$VERSION" == "x5.32" ]; then
    version="5.32"
  elif [ x"$VERSION" == "x5.34" ]; then
    version="5.34"
  elif [ x"$VERSION" == "x5.36" ]; then
    version="5.36"
  elif [ x"$VERSION" == "x5.38" ]; then
    version="5.38"
  elif [ x"$VERSION" == "x5.40" ]; then
    version="5.40"
  fi
  test_scl_usage "perl --version" "v${version}."
  ct_check_testcase_result $?

  test_connection
  ct_check_testcase_result $?
  cleanup_test_app
}

# Build application, run it, perform test function, clean up.
# First argument is directory name.
# Second argument is function that expects running application. The function
# must return (or terminate with) non-zero value to report an failure,
# 0 otherwise.
# Other arguments are additional s2i options, like --env=FOO=bar.
# The test function have available container ID in $cid_file, container output
# in ${tmp_dir}/out, container stderr in ${tmp_dir}/err.
do_test() {
    test_name="$1"
    test_function="$2"
    shift 2

    info "Starting tests for ${test_name}."

    tmp_dir=$(mktemp -d)
    ct_check_testcase_result $?
    cid_file="${tmp_dir}/cid"
    s2i_args="--pull-policy=never"

    # Build and run the test application
    prepare
    run_s2i_build $s2i_args "$@"
    ct_check_testcase_result $?
    run_test_application >"${tmp_dir}/out" 2>"${tmp_dir}/err" &
    ct_wait_for_cid $cid_file

    # Perform user-supplied test function
    $test_function;
    ct_check_testcase_result $?

    # Terminate the test application and clean up
    cleanup_test_app
    cleanup
    rm -rf "$tmp_dir"
    info "All tests for the ${test_name} finished successfully."
}


# List of tests to execute:

# This is original test that does more things like s2i API checks. Other tests
# executed by do_test() will not repeat these checks.
test_sample_test_app() {
    test_name='sample-test-app'
    info "Starting tests for ${test_name}"

    cid_file=$(mktemp -u --suffix=.cid)

    # Since we built the candidate image locally, we don't want S2I attempt to pull
    # it from Docker hub
    s2i_args="--pull-policy=never"

    prepare
    run_s2i_build $s2i_args
    ct_check_testcase_result $?

    # Verify the 'usage' script is working properly when running the base image with 's2i usage ...'
    test_s2i_usage
    ct_check_testcase_result $?

    # Verify the 'usage' script is working properly when running the base image with 'docker run ...'
    test_docker_run_usage
    ct_check_testcase_result $?

    # Test application with default UID
    test_application

    # Test application with random UID
    CONTAINER_ARGS="-u 12345" test_application

    info "All tests for the ${test_name} finished successfully."
    cleanup
}

# Check scripts installed from CPAN are available to the application.
test_2_response() {
    test_response '/' 200 'Usage'
}

test_binpath() {
    do_test 'binpath' 'test_2_response'
}

# Check a single PSGI application is recognized a mod_perl is autoconfigured.
test_3_response() {
    test_response '/' 200 '<title>Web::Paste::Simple'
}

test_psgi() {
    do_test 'psgi' 'test_3_response'
}

# Check variables can select a PSGI application and set URI path.
test_4_response() {
    test_response '/path' 200 '<title>Web::Paste::Simple' && \
    test_response '/cpanfile' 200 'requires'
}

test_psgi_variables() {
    do_test 'psgi-variables' 'test_4_response' \
        '--env=PSGI_FILE=./application2.psgi' '--env=PSGI_URI_PATH=/path'
}

# Check httpd access_log flows to stdout, error_log to stdout.
# TODO: send error_log to stderr after dropping support for broken
# docker < 1.9.
test_5_response() {
    test_response '/' 200 'Text in HTTP body' && \
    test_stdout '"GET /[^"]*" 200 ' && \
    test_stdout 'Warning on stderr'
}

test_warningonstderr() {
    do_test 'warningonstderr' 'test_5_response'
}

# Check that httpd starts *.fcgi scripts via FCGI interface.
# Checks it also recognizes index.fcgi as an index document.
test_6_function() {
    test_response '/another.fcgi' 200 'Another FCGI script.'
    test_response '/' 200 'Index FCGI script.'
}

test_fcgi() {
    do_test 'fcgi' 'test_6_function'
}

test_7_response() {
    test_response '/' 200 'old initial value: 0'
    ct_check_testcase_result $?

    test_response '/' 200 'old initial value: 1'
    ct_check_testcase_result $?

    # If we don't set PSGI_RELOAD, this change don't affects application.
    sleep 2
    info "Changing source code of application"
    docker exec $(cat ${cid_file}) /bin/sh -c "sed -ie 's/old initial value/new initial value/' lib/My/Test.pm"
    ct_check_testcase_result $?
    sleep 2

    test_response '/' 200 'old initial value: 2'
    ct_check_testcase_result $?
}

test_psgi_hot_deploy_without_reload() {
    do_test 'psgi-hot_deploy' 'test_7_response' \
	'--env=PSGI_FILE=./index.psgi'
}

test_8_response() {
    test_response '/' 200 'old initial value: 0'
    ct_check_testcase_result $?

    test_response '/' 200 'old initial value: 1'
    ct_check_testcase_result $?

    # If we set PSGI_RELOAD, this change affects application.
    sleep 3
    info "Changing source code of application"
    docker exec $(cat ${cid_file}) /bin/sh -c "sed -ie 's/old initial value/new initial value/' lib/My/Test.pm"
    ct_check_testcase_result $?

    info "Check if new value is present"
    docker exec $(cat ${cid_file}) /bin/sh -c "grep 'new initial' lib/My/Test.pm"
    ct_check_testcase_result $?
    sleep 3

    test_response '/' 200 'new initial value: 0'
    ct_check_testcase_result $?
}

test_psgi_hot_deploy_with_reload() {
    do_test 'psgi-hot_deploy' 'test_8_response' \
	'--env=PSGI_FILE=./index.psgi' '--env=PSGI_RELOAD=1'
}

test_npm() {
    test_name='sample-test-app'
    info "Testing npm availibility"
    # Since we built the candidate image locally, we don't want S2I attempt to pull
    # it from Docker hub
    s2i_args="--pull-policy=never"

    prepare
    run_s2i_build $s2i_args
    ct_check_testcase_result $?

    ct_npm_works
    ct_check_testcase_result $?

    cleanup
}

function test_from_dockerfile(){
  info "Check building using a Dockerfile"
  ct_test_app_dockerfile $test_dir/examples/from-dockerfile/${VERSION}/Dockerfile 'https://github.com/sclorg/dancer-ex.git' 'Welcome to your Dancer application' app-src
  t1=$?
  if [ "$t1" == "0" ]; then
    echo "test 1 from_dockerfile passed";
  fi;
  ct_check_testcase_result $t1

  info "Check building using a Dockerfile.s2i"
  ct_test_app_dockerfile $test_dir/examples/from-dockerfile/${VERSION}/Dockerfile.s2i 'https://github.com/sclorg/dancer-ex.git' 'Welcome to your Dancer application' app-src
  t2=$?
  if [[ "$t2" == "0" ]];then
    echo "test 2 from_dockerfile passed";
  fi;
  ct_check_testcase_result $t2
}

# Run the chosen tests
TEST_SET=${TESTS:-$TEST_LIST} ct_run_tests_from_testset
