#!/bin/bash
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to exercise the S2I scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME-sclorg/perl-532-c9s}

# TODO: Make command compatible for Mac users
test_dir="$(readlink -f $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$(readlink -f ${test_dir}/..)
TEST_LIST="\
test_sample_test_app
test_binpath
test_psgi
test_psgi_variables
test_warningonstderr
test_npm
test_from_dockerfile
"

source "${test_dir}/test-lib.sh"

# TODO: This should be part of the image metadata
test_port=8080

info() {
  echo -e "\n\e[1m[INFO] $@...\e[0m\n"
}

image_exists() {
  docker inspect $1 &>/dev/null
}

kill_container_if_exists() {
  local name=$1
  local cid="$(ct_get_cid "$name")"
  image_exists "$cid" && docker stop "$cid" && rm -f "$CID_FILE_DIR/$name"
}

run_s2i_build() {
  ct_s2i_build_as_df file://${test_dir}/${test_name} ${IMAGE_NAME} ${IMAGE_NAME}-testapp $(ct_build_s2i_npm_variables) "$@"
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # TODO: S2I build require the application is a valid 'GIT' repository, we
  # should remove this restriction in the future when a file:// is used.
  info "Build the test application image"
  pushd ${test_dir}/${test_name} >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null
}

run_test_application() {
  local name=$1
  local cidfile="$CID_FILE_DIR/$name"
  docker run --user=100001 --rm --cidfile=${cid_file} ${IMAGE_NAME}-testapp
}

cleanup() {
  info "Cleaning up the test application image"
  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi -f ${IMAGE_NAME}-testapp
  fi
  rm -rf ${test_dir}/${test_name}/.git
}

test_s2i_usage() {
  info "Testing 's2i usage'"
  ct_s2i_usage ${IMAGE_NAME} ${s2i_args} &>/dev/null
}

test_docker_run_usage() {
  info "Testing 'docker run' usage"
  local cidfile="$(mktemp -u --suffix=.cid --tmpdir=$CID_FILE_DIR)"
  docker run --cidfile "$cidfile" ${IMAGE_NAME} &>/dev/null
}

test_scl_usage() {
  local run_cmd="$1"
  local expected="$2"
  local name="$3"
  local cid_file="$CID_FILE_DIR/$name"

  info "Testing the image SCL enable"
  out=$(docker run --rm ${IMAGE_NAME} /bin/bash -c "${run_cmd}")
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/bash -c "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/sh -ic "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/sh -ic "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}

# Match PCRE regular expression against container standard output.
# First argument is the PCRE regular expression.
# It expects standard output in ${tmp_dir}/out file.
test_stdout() {
  local regexp="$1"
  local output="${tmp_dir}/out"
  info "Testing the container standard output for /${regexp}/"
  grep -qP -e "$regexp" "$output";
}

# Match PCRE regular expression against container standard error output.
# First argument is the PCRE regular expression.
# It expects error output in ${tmp_dir}/err file.
test_stderr() {
  local regexp="$1"
  local output="${tmp_dir}/err"
  info "Testing the container error output for /${regexp}/"
  grep -qP -e "$regexp" "$output";
}

test_connection() {
    local name=$1
    ct_test_response "http://$(ct_get_cip $name):${test_port}/" 200 ''
}

test_application() {
  local name=$1
  
  # Verify that the HTTP connection can be established to test application container
  run_test_application "$name" &

  # Wait for the container to write it's CID file
  ct_wait_for_cid "$CID_FILE_DIR/$name"

  test_scl_usage "perl --version" "v${VERSION}." "$name"
  ct_check_testcase_result $?

  test_connection "$name"
  ct_check_testcase_result $?

  kill_container_if_exists "$name"
}

# Build application, run it, perform test function, clean up.
# First argument is directory name.
# Second argument is function that expects running application. The function
# must return (or terminate with) non-zero value to report an failure,
# 0 otherwise.
# Other arguments are additional s2i options, like --env=FOO=bar.
# The test function have available container ID in $cid_file, container output
# in ${tmp_dir}/out, container stderr in ${tmp_dir}/err.
do_test() {
    test_name="$1"
    test_function="$2"
    shift 2

    info "Starting tests for ${test_name}."

    tmp_dir=$(mktemp -d)
    ct_check_testcase_result $?
    cid_file="$CID_FILE_DIR/$test_name"
    s2i_args="--pull-policy=never"

    # Build and run the test application
    prepare
    run_s2i_build $s2i_args "$@"
    ct_check_testcase_result $?
    run_test_application "$test_name" >"${tmp_dir}/out" 2>"${tmp_dir}/err" &
    ct_wait_for_cid "$CID_FILE_DIR/$test_name"

    # Perform user-supplied test function
    $test_function "$test_name";
    ct_check_testcase_result $?

    # Terminate the test application and clean up
    cleanup
    rm -rf "$tmp_dir"
    info "All tests for the ${test_name} finished successfully."
}


# List of tests to execute:

# This is original test that does more things like s2i API checks. Other tests
# executed by do_test() will not repeat these checks.
test_sample_test_app() {
    test_name='sample-test-app'
    info "Starting tests for ${test_name}"

    cid_file="$CID_FILE_DIR/$test_name"

    # Since we built the candidate image locally, we don't want S2I attempt to pull
    # it from Docker hub
    s2i_args="--pull-policy=never"

    prepare
    run_s2i_build $s2i_args
    ct_check_testcase_result $?

    # Verify the 'usage' script is working properly when running the base image with 's2i usage ...'
    test_s2i_usage
    ct_check_testcase_result $?

    # Verify the 'usage' script is working properly when running the base image with 'docker run ...'
    test_docker_run_usage
    ct_check_testcase_result $?

    # Test application with default UID
    test_application "$test_name"

    # Test application with random UID
    CONTAINER_ARGS="-u 12345" test_application "$test_name"

    info "All tests for the ${test_name} finished successfully."
    cleanup
}

# Check scripts installed from CPAN are available to the application.
test_2_response() {
    local name=$1
    ct_test_response "http://$(ct_get_cip $name):${test_port}/" 200 'Usage'
}

test_binpath() {
    do_test 'binpath' 'test_2_response'
}

# Check a single PSGI application is recognized a mod_perl is autoconfigured.
test_3_response() {
    local name=$1
    ct_test_response "http://$(ct_get_cip $name):${test_port}/" 200 '<title>Web::Paste::Simple'
}

test_psgi() {
    do_test 'psgi' 'test_3_response'
}

# Check variables can select a PSGI application and set URI path.
test_4_response() {
    local name=$1
    ct_test_response "http://$(ct_get_cip $name):${test_port}/path" 200 '<title>Web::Paste::Simple' && \
    ct_test_response "http://$(ct_get_cip $name):${test_port}/cpanfile" 200 'requires'
}

test_psgi_variables() {
    do_test 'psgi-variables' 'test_4_response' \
        '--env=PSGI_FILE=./application2.psgi' '--env=PSGI_URI_PATH=/path'
}

# Check httpd access_log flows to stdout, error_log to stdout.
# TODO: send error_log to stderr after dropping support for broken
# docker < 1.9.
test_5_response() {
    local name=$1
    ct_test_response "http://$(ct_get_cip $name):${test_port}/" 200 'Text in HTTP body' && \
    test_stdout '"GET /[^"]*" 200 ' && \
    test_stdout 'Warning on stderr'
}

test_warningonstderr() {
    do_test 'warningonstderr' 'test_5_response'
}

test_npm() {
    test_name='sample-test-app'
    info "Testing npm availibility"
    # Since we built the candidate image locally, we don't want S2I attempt to pull
    # it from Docker hub
    s2i_args="--pull-policy=never"

    prepare
    run_s2i_build $s2i_args
    ct_check_testcase_result $?

    ct_npm_works
    ct_check_testcase_result $?

    cleanup
}

function test_from_dockerfile(){
  info "Check building using a Dockerfile"
  ct_test_app_dockerfile $test_dir/examples/from-dockerfile/${VERSION}/Dockerfile 'https://github.com/sclorg/dancer-ex.git' 'Welcome to your Dancer application' app-src
  t1=$?
  if [ "$t1" == "0" ]; then
    echo "test 1 from_dockerfile passed";
  fi;
  ct_check_testcase_result $t1

  info "Check building using a Dockerfile.s2i"
  ct_test_app_dockerfile $test_dir/examples/from-dockerfile/${VERSION}/Dockerfile.s2i 'https://github.com/sclorg/dancer-ex.git' 'Welcome to your Dancer application' app-src
  t2=$?
  if [[ "$t2" == "0" ]];then
    echo "test 2 from_dockerfile passed";
  fi;
  ct_check_testcase_result $t2
}

ct_init

TEST_SET=${TESTS:-$TEST_LIST} ct_run_tests_from_testset

# vim: set tabstop=2:shiftwidth=2:expandtab:
